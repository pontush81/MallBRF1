import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  IconButton,
  Checkbox,
  TextField,
  Button,
  Divider,
  Chip,
  Card,
  CardContent,
  Grid,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress
} from '@mui/material';
import {
  CheckCircle as CheckIcon,
  Schedule as ScheduleIcon,
  Build as BuildIcon,
  Add as AddIcon,
  History as HistoryIcon,
  Warning as WarningIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  AttachFile as AttachFileIcon,
  PictureAsPdf as PictureAsPdfIcon,
  Photo as PhotoIcon,
  OpenInNew as OpenInNewIcon
} from '@mui/icons-material';
import {
  MaintenanceTask,
  MajorProject,
  getMaintenanceTasksByYear,
  getMajorProjects,
  saveMaintenanceTask,
  saveMajorProject,
  deleteMaintenanceTask,
  deleteMajorProject,
  // createAnnualMaintenancePlan, // Tillf√§lligt inaktiverad
  uploadProjectDocument,
  getProjectDocuments,
  deleteProjectDocument
} from '../../services/maintenanceService';





const CATEGORY_LABELS = {
  spring: 'V√•r',
  summer: 'Sommar', 
  autumn: 'H√∂st',
  winter: 'Vinter',
  ongoing: 'L√∂pande'
};

const CATEGORY_COLORS = {
  spring: '#4caf50',
  summer: '#ff9800',
  autumn: '#f44336', 
  winter: '#2196f3',
  ongoing: '#9c27b0'
};

const SimpleMaintenancePlan: React.FC = () => {
  const currentYear = new Date().getFullYear();
  const [tasks, setTasks] = useState<MaintenanceTask[]>([]);
  const [majorProjects, setMajorProjects] = useState<MajorProject[]>([]);
  const [selectedYear, setSelectedYear] = useState(currentYear);
  const [newProjectDialog, setNewProjectDialog] = useState(false);
  const [newProject, setNewProject] = useState<Partial<MajorProject>>({});
  const [newTaskDialog, setNewTaskDialog] = useState(false);
  const [newTask, setNewTask] = useState<Partial<MaintenanceTask>>({});
  const [editTaskDialog, setEditTaskDialog] = useState(false);
  const [editTask, setEditTask] = useState<Partial<MaintenanceTask>>({});
  const [editProjectDialog, setEditProjectDialog] = useState(false);
  const [editProject, setEditProject] = useState<Partial<MajorProject>>({});
  const [projectDocuments, setProjectDocuments] = useState<any[]>([]);
  const [uploadingDoc, setUploadingDoc] = useState(false);
  const [clearingData, setClearingData] = useState(false);
  const [sortBy, setSortBy] = useState<'category' | 'due_date' | 'status' | 'name' | 'created_at'>('category');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Ladda eller skapa √•rets underh√•llslista
  useEffect(() => {
    loadMaintenanceData();
  }, [selectedYear]);

  const loadMaintenanceData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Ladda underh√•llsuppgifter f√∂r valt √•r
      const existingTasks = await getMaintenanceTasksByYear(selectedYear);
      
      // TILLF√ÑLLIGT INAKTIVERAT - L√•t anv√§ndaren sj√§lv v√§lja vilka uppgifter som ska skapas
      // Nu med √•terkommande funktionalitet kan anv√§ndaren skapa exakt det de beh√∂ver
      // if (existingTasks.length === 0) {
      //   // Skapa ny √•rlig underh√•llsplan om ingen finns
      //   const newTasks = await createAnnualMaintenancePlan(selectedYear);
      //   setTasks(newTasks);
      // } else {
        setTasks(existingTasks);
      // }

      // Ladda st√∂rre projekt
      const projects = await getMajorProjects();
      setMajorProjects(projects);
      
    } catch (err) {
      setError('Kunde inte ladda underh√•llsdata. F√∂rs√∂k igen senare.');
      console.error('Error loading maintenance data:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleTaskToggle = async (taskId: string) => {
    const taskToUpdate = tasks.find(task => task.id === taskId);
    if (!taskToUpdate) return;

    const isCompleted = !taskToUpdate.completed;
    const updatedTask = {
      ...taskToUpdate,
      completed: isCompleted,
      completed_date: isCompleted ? new Date().toISOString().split('T')[0] : undefined
    };

    // Uppdatera lokalt state omedelbart f√∂r b√§ttre UX
    setTasks(tasks.map(task => 
      task.id === taskId ? updatedTask : task
    ));

    // Spara till Supabase
    await saveMaintenanceTask(updatedTask);
    
    // üîÑ √ÖTERKOMMANDE LOGIK: Skapa n√§sta instans n√§r uppgiften slutf√∂rs
    if (isCompleted && taskToUpdate.is_recurring && taskToUpdate.next_due_date) {
      await createNextRecurringInstance(taskToUpdate);
    }
  };

  const handleTaskNoteChange = async (taskId: string, notes: string) => {
    const taskToUpdate = tasks.find(task => task.id === taskId);
    if (!taskToUpdate) return;

    const updatedTask = { ...taskToUpdate, notes };
    
    // Uppdatera lokalt state
    setTasks(tasks.map(task => 
      task.id === taskId ? updatedTask : task
    ));

    // Spara till Supabase (med debounce skulle vara b√§ttre i produktion)
    await saveMaintenanceTask(updatedTask);
  };

  const handleAddMajorProject = async () => {
    if (!newProject.name || !newProject.estimated_year) return;
    
    const project: Partial<MajorProject> = {
      id: `project_${Date.now()}`,
      name: newProject.name,
      description: newProject.description || '',
      estimated_year: newProject.estimated_year,
      estimated_cost: newProject.estimated_cost,
      priority: newProject.priority || 'medium',
      category: newProject.category,
      approval_status: newProject.approval_status || 'pending',
      contractor: newProject.contractor,
      status: 'planned'
    };

    // Spara till Supabase
    const savedProject = await saveMajorProject(project);
    if (savedProject) {
      setMajorProjects([...majorProjects, savedProject]);
    }
    
    setNewProjectDialog(false);
    setNewProject({});
  };

  const handleAddMaintenanceTask = async () => {
    if (!newTask.name || !newTask.category) return;
    
    try {
      // üéØ FIX: Anv√§nd √•ret fr√•n f√∂rfallodatum, inte valt √•r!
      const taskYear = newTask.due_date ? new Date(newTask.due_date).getFullYear() : selectedYear;
      
      const task: Partial<MaintenanceTask> = {
        id: `task_${Date.now()}`,
        name: newTask.name,
        description: newTask.description || '',
        category: newTask.category,
        year: taskYear, // ‚úÖ Korrekt √•r baserat p√• f√∂rfallodatum
        due_date: newTask.due_date || undefined,
        completed: false,
        // √Öterkommande funktionalitet enligt Perplexity
        is_recurring: newTask.is_recurring || false,
        recurrence_pattern: newTask.recurrence_pattern,
        is_template: false,
        next_due_date: newTask.is_recurring ? calculateNextDueDate(newTask.due_date, newTask.recurrence_pattern) : undefined,
      };

      console.log('üîç Adding new task:', task);
      console.log(`üìÖ Task year determined: ${taskYear} (from due_date: ${newTask.due_date}, selected year: ${selectedYear})`);

      // Spara till Supabase
      const savedTask = await saveMaintenanceTask(task);
      if (savedTask) {
        console.log('‚úÖ Task saved successfully:', savedTask);
        
        // üîÑ Om uppgiften √§r f√∂r valt √•r, l√§gg till i lista
        if (savedTask.year === selectedYear) {
          setTasks([...tasks, savedTask]);
        }
        
        if (savedTask.is_recurring) {
          console.log(`üîÑ Recurring task created: ${savedTask.name} (${savedTask.recurrence_pattern})`);
          console.log(`üìÖ Next occurrence: ${savedTask.next_due_date}`);
        }
      } else {
        console.error('‚ùå Failed to save task - no response from saveMaintenanceTask');
      }
      
      setNewTaskDialog(false);
      setNewTask({});
      
      // üí° Informera anv√§ndaren om √•ret √§ndrades
      if (taskYear !== selectedYear && newTask.due_date) {
        alert(`üìÖ Uppgiften sparades under ${taskYear} baserat p√• f√∂rfallodatumet. V√§xla till √•r ${taskYear} f√∂r att se den!`);
      }
      
    } catch (error) {
      console.error('‚ùå Error adding maintenance task:', error);
    }
  };

  // Hj√§lpfunktioner f√∂r √•terkommande uppgifter
  const getRecurrenceLabel = (pattern: string | undefined): string => {
    switch (pattern) {
      case 'monthly': return 'M√•nadsvis';
      case 'quarterly': return 'Kvartalsvis';
      case 'semi_annually': return 'Halv√•rsvis';
      case 'annually': return '√Örligen';
      default: return '√Öterkommande';
    }
  };

  // Hj√§lpfunktion f√∂r att ber√§kna n√§sta f√∂rfallodatum
  const calculateNextDueDate = (currentDueDate: string | undefined, pattern: string | undefined): string | undefined => {
    if (!currentDueDate || !pattern) return undefined;
    
    const current = new Date(currentDueDate);
    let next = new Date(current);
    
    switch (pattern) {
      case 'monthly':
        next.setMonth(next.getMonth() + 1);
        break;
      case 'quarterly':
        next.setMonth(next.getMonth() + 3);
        break;
      case 'semi_annually':
        next.setMonth(next.getMonth() + 6);
        break;
      case 'annually':
        next.setFullYear(next.getFullYear() + 1);
        break;
      default:
        return undefined;
    }
    
    return next.toISOString().split('T')[0];
  };

  // üîÑ SKAPA N√ÑSTA √ÖTERKOMMANDE INSTANS
  const createNextRecurringInstance = async (completedTask: MaintenanceTask) => {
    if (!completedTask.is_recurring || !completedTask.next_due_date) return;
    
    try {
      console.log(`üîÑ Creating next recurring instance for: ${completedTask.name}`);
      
      // Ber√§kna n√§sta f√∂rfallodatum fr√•n det som redan finns
      const nextDueDate = completedTask.next_due_date;
      const followingDueDate = calculateNextDueDate(nextDueDate, completedTask.recurrence_pattern);
      const nextYear = new Date(nextDueDate).getFullYear();
      
      const nextTask: Partial<MaintenanceTask> = {
        id: `task_${Date.now()}_recurring`,
        name: completedTask.name,
        description: completedTask.description,
        category: completedTask.category,
        year: nextYear, // ‚úÖ R√§tt √•r fr√•n n√§sta f√∂rfallodatum
        due_date: nextDueDate,
        completed: false,
        is_recurring: true,
        recurrence_pattern: completedTask.recurrence_pattern,
        is_template: false,
        next_due_date: followingDueDate,
        // Beh√•ll referens till ursprunglig template
        parent_template_id: completedTask.parent_template_id || completedTask.id,
      };
      
      console.log(`üìÖ Next task scheduled for: ${nextDueDate} (year: ${nextYear})`);
      console.log(`üìÖ Following occurrence: ${followingDueDate}`);
      
      // Spara n√§sta instans till Supabase
      const savedNextTask = await saveMaintenanceTask(nextTask);
      
      if (savedNextTask) {
        console.log(`‚úÖ Next recurring instance created: ${savedNextTask.name}`);
        
        // Om n√§sta instans √§r f√∂r det aktuella √•ret, l√§gg till i listan
        if (savedNextTask.year === selectedYear) {
          setTasks(prevTasks => [...prevTasks, savedNextTask]);
        }
        
        // Visa meddelande till anv√§ndaren
        alert(`üîÑ N√§sta instans av "${completedTask.name}" skapades automatiskt f√∂r ${nextDueDate}!`);
      }
      
    } catch (error) {
      console.error('‚ùå Error creating next recurring instance:', error);
    }
  };

  const handleEditTask = (task: MaintenanceTask) => {
    setEditTask(task);
    setEditTaskDialog(true);
  };

  const handleUpdateTask = async () => {
    if (!editTask.name || !editTask.category || !editTask.id) return;
    
    try {
      // üéØ FIX: Uppdatera √•ret baserat p√• f√∂rfallodatum
      const taskYear = editTask.due_date ? new Date(editTask.due_date).getFullYear() : selectedYear;
      const originalTask = tasks.find(t => t.id === editTask.id);
      
      // Uppdatera next_due_date om √•terkommande inst√§llningar √§ndrats
      const taskToUpdate = {
        ...editTask,
        year: taskYear, // ‚úÖ Uppdaterat √•r
        next_due_date: editTask.is_recurring ? 
          calculateNextDueDate(editTask.due_date, editTask.recurrence_pattern) : 
          undefined
      };
      
      console.log('üîç Updating task with recurring data:', taskToUpdate);
      console.log(`üìÖ Task year updated: ${taskYear} (from due_date: ${editTask.due_date})`);
      
      // Spara till Supabase
      const savedTask = await saveMaintenanceTask(taskToUpdate);
      if (savedTask) {
        // Om uppgiften bytte √•r, ta bort fr√•n nuvarande lista
        if (originalTask?.year !== savedTask.year && savedTask.year !== selectedYear) {
          setTasks(tasks.filter(task => task.id !== savedTask.id));
          alert(`üìÖ Uppgiften flyttades till ${savedTask.year} baserat p√• det nya f√∂rfallodatumet. V√§xla till √•r ${savedTask.year} f√∂r att se den!`);
        } else {
          // Uppdatera i nuvarande lista
          setTasks(tasks.map(task => 
            task.id === savedTask.id ? savedTask : task
          ));
        }
        
        if (savedTask.is_recurring) {
          console.log(`üîÑ Updated recurring task: ${savedTask.name} (${savedTask.recurrence_pattern})`);
          console.log(`üìÖ Next due: ${savedTask.next_due_date}`);
        }
      }
      
      setEditTaskDialog(false);
      setEditTask({});
      
    } catch (error) {
      console.error('‚ùå Error updating maintenance task:', error);
    }
  };

  const handleDeleteTask = async (taskId: string) => {
    if (!window.confirm('√Ñr du s√§ker p√• att du vill ta bort denna uppgift?')) return;
    
    const success = await deleteMaintenanceTask(taskId);
    if (success) {
      setTasks(tasks.filter(task => task.id !== taskId));
    }
  };

  const sortTasks = (tasksToSort: MaintenanceTask[]) => {
    return [...tasksToSort].sort((a, b) => {
      let comparison = 0;
      
      switch (sortBy) {
        case 'due_date':
          const aDate = a.due_date ? new Date(a.due_date) : new Date('9999-12-31');
          const bDate = b.due_date ? new Date(b.due_date) : new Date('9999-12-31');
          comparison = aDate.getTime() - bDate.getTime();
          break;
        case 'status':
          if (a.completed !== b.completed) {
            comparison = a.completed ? 1 : -1; // Ej klara f√∂rst
          } else {
            comparison = a.name.localeCompare(b.name, 'sv');
          }
          break;
        case 'name':
          comparison = a.name.localeCompare(b.name, 'sv');
          break;
        case 'created_at':
          const aCreated = a.created_at ? new Date(a.created_at) : new Date(0);
          const bCreated = b.created_at ? new Date(b.created_at) : new Date(0);
          comparison = aCreated.getTime() - bCreated.getTime();
          break;
        case 'category':
        default:
          const categoryOrder = ['winter', 'spring', 'summer', 'autumn', 'ongoing'];
          comparison = categoryOrder.indexOf(a.category) - categoryOrder.indexOf(b.category);
          if (comparison === 0) {
            comparison = a.name.localeCompare(b.name, 'sv');
          }
          break;
      }
      
      return sortOrder === 'asc' ? comparison : -comparison;
    });
  };

  const getTasksByCategory = (category: keyof typeof CATEGORY_LABELS) => {
    const filteredTasks = tasks.filter(task => task.category === category);
    return sortBy === 'category' ? filteredTasks : sortTasks(filteredTasks);
  };

  const getAllTasksSorted = () => {
    return sortTasks(tasks);
  };

  // Helper functions f√∂r st√∂rre projekt
  const getProjectStatusLabel = (status: string) => {
    const statusLabels = {
      'planned': 'Planerat',
      'approved': 'Godk√§nt', 
      'tendering': 'Upphandling',
      'in_progress': 'P√•g√•r',
      'completed': 'Slutf√∂rt'
    };
    return statusLabels[status as keyof typeof statusLabels] || status;
  };

  const getProjectCategoryLabel = (category: string) => {
    const categoryLabels = {
      'structure': 'Byggnad',
      'heating': 'V√§rme',
      'plumbing': 'VVS', 
      'electrical': 'El',
      'exterior': 'Exteri√∂r',
      'interior': 'Interi√∂r'
    };
    return categoryLabels[category as keyof typeof categoryLabels] || category;
  };

  const handleEditProject = async (project: MajorProject) => {
    setEditProject(project);
    setEditProjectDialog(true);
    
    // Ladda projektdokument
    const docs = await getProjectDocuments(project.id);
    setProjectDocuments(docs);
  };

  const handleDocumentUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !editProject.id) return;

    try {
      setUploadingDoc(true);
      const uploadedDoc = await uploadProjectDocument(editProject.id, file);
      setProjectDocuments([...projectDocuments, uploadedDoc]);
      
      // Rensa input
      e.target.value = '';
    } catch (error) {
      console.error('Error uploading document:', error);
    } finally {
      setUploadingDoc(false);
    }
  };

  const handleDocumentDelete = async (filePath: string) => {
    if (!window.confirm('√Ñr du s√§ker p√• att du vill ta bort detta dokument?')) return;
    
    const success = await deleteProjectDocument(filePath);
    if (success) {
      setProjectDocuments(projectDocuments.filter(doc => doc.id !== filePath));
    }
  };

  const handleDeleteProject = async (projectId: string) => {
    if (!window.confirm('√Ñr du s√§ker p√• att du vill ta bort detta projekt?')) return;
    
    const success = await deleteMajorProject(projectId);
    if (success) {
      setMajorProjects(majorProjects.filter(project => project.id !== projectId));
    }
  };

  const handleUpdateProject = async () => {
    if (!editProject.name || !editProject.estimated_year || !editProject.id) return;
    
    try {
      const updatedProject = await saveMajorProject(editProject);
      if (updatedProject) {
        setMajorProjects(majorProjects.map(project => 
          project.id === updatedProject.id ? updatedProject : project
        ));
      }
      
      setEditProjectDialog(false);
      setEditProject({});
    } catch (error) {
      console.error('‚ùå Error updating project:', error);
    }
  };

  // üßπ RENSA ALL DATA - f√∂r att starta fr√•n b√∂rjan
  const handleClearAllData = async () => {
    if (!window.confirm('üö® √Ñr du s√§ker p√• att du vill radera ALLA uppgifter och projekt f√∂r detta √•r? Detta kan inte √•ngras!')) {
      return;
    }

    if (!window.confirm('‚ö†Ô∏è SISTA VARNINGEN: Detta kommer radera ALL underh√•llsdata f√∂r ' + selectedYear + '. Forts√§tta?')) {
      return;
    }

    try {
      setClearingData(true);
      console.log('üßπ Clearing all data for year:', selectedYear);

      // Radera alla uppgifter f√∂r √•ret
      for (const task of tasks) {
        await deleteMaintenanceTask(task.id);
      }

      // Radera alla projekt (oavsett √•r - anv√§ndaren f√•r v√§lja vad de vill beh√•lla)
      for (const project of majorProjects) {
        await deleteMajorProject(project.id);
      }

      // Uppdatera lokalt state
      setTasks([]);
      setMajorProjects([]);

      alert('‚úÖ All data har raderats framg√•ngsrikt!');

    } catch (error) {
      console.error('‚ùå Error clearing data:', error);
      alert('‚ùå Ett fel uppstod vid rensning av data. Se konsolen f√∂r detaljer.');
    } finally {
      setClearingData(false);
    }
  };

  const renderTaskItem = (task: MaintenanceTask) => (
    <ListItem key={task.id} sx={{ pl: 0, pr: 10, flexDirection: 'column', alignItems: 'stretch' }}>
      <Box display="flex" alignItems="flex-start" width="100%">
        <ListItemIcon sx={{ minWidth: '42px', mt: '9px' }}>
          <Checkbox
            checked={task.completed}
            onChange={() => handleTaskToggle(task.id)}
            color="primary"
          />
        </ListItemIcon>
        <ListItemText
          sx={{ flex: 1 }}
          primary={
            <Box display="flex" alignItems="center" gap={1}>
              <Typography 
                sx={{ 
                  textDecoration: task.completed ? 'line-through' : 'none',
                  color: task.completed ? 'text.secondary' : 'text.primary'
                }}
              >
                {task.name}
              </Typography>
              {sortBy !== 'category' && (
                <Chip 
                  label={CATEGORY_LABELS[task.category]}
                  size="small"
                  sx={{ 
                    backgroundColor: CATEGORY_COLORS[task.category],
                    color: 'white',
                    height: '20px',
                    fontSize: '0.7rem'
                  }}
                />
              )}
              {task.is_recurring && (
                <Chip 
                  label={`üîÑ ${getRecurrenceLabel(task.recurrence_pattern)}`}
                  size="small" 
                  color="info"
                  variant="outlined"
                  title="√Öterkommande uppgift"
                  sx={{ 
                    height: '20px',
                    fontSize: '0.7rem',
                    fontWeight: 'bold'
                  }}
                />
              )}
            </Box>
          }
          secondary={
            <Box>
              {task.description && (
                <Typography variant="body2" color="text.secondary" component="span">
                  {task.description}
                </Typography>
              )}
              {task.due_date && (
                <Typography 
                  variant="caption" 
                  component="div"
                  color={
                    task.completed 
                      ? 'text.secondary' 
                      : new Date(task.due_date) < new Date() 
                        ? 'error.main' 
                        : 'text.secondary'
                  }
                  sx={{ mt: task.description ? 0.5 : 0 }}
                >
                  F√∂rfaller: {task.due_date}
                </Typography>
              )}
              {task.completed && task.completed_date && (
                <Typography 
                  variant="caption" 
                  component="div"
                  color="success.main" 
                  sx={{ mt: 0.5 }}
                >
                  Slutf√∂rt: {task.completed_date}
                </Typography>
              )}
            </Box>
          }
        />
        <Box sx={{ display: 'flex', alignItems: 'flex-start', ml: 1 }}>
          <IconButton
            size="small"
            onClick={() => handleEditTask(task)}
            sx={{ mr: 0.5 }}
          >
            <EditIcon fontSize="small" />
          </IconButton>
          <IconButton
            size="small"
            onClick={() => handleDeleteTask(task.id)}
            color="error"
          >
            <DeleteIcon fontSize="small" />
          </IconButton>
        </Box>
      </Box>
      <Box sx={{ ml: '42px', mr: '88px', mt: 1 }}>
        <TextField
          fullWidth
          size="small"
          placeholder="Anteckningar..."
          value={task.notes || ''}
          onChange={(e) => handleTaskNoteChange(task.id, e.target.value)}
          multiline
          rows={1}
        />
      </Box>
    </ListItem>
  );

  const getCompletionStats = () => {
    const completed = tasks.filter(task => task.completed).length;
    const total = tasks.length;
    return { completed, total, percentage: total > 0 ? Math.round((completed / total) * 100) : 0 };
  };

  const stats = getCompletionStats();
  const availableYears = Array.from({ length: 5 }, (_, i) => currentYear - 2 + i);

  if (loading) {
    return (
      <Container maxWidth="lg" sx={{ py: 3, textAlign: 'center' }}>
        <CircularProgress />
        <Typography variant="h6" sx={{ mt: 2 }}>
          Laddar underh√•llsplan...
        </Typography>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="lg" sx={{ py: 3 }}>
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
        <Button variant="contained" onClick={loadMaintenanceData}>
          F√∂rs√∂k igen
        </Button>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      {/* Header */}
      <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" flexWrap="wrap" gap={2}>
          <Box>
            <Typography variant="h4" gutterBottom>
              Underh√•llsplan
            </Typography>
            <Typography variant="body1" color="text.secondary">
              Enkel √∂versikt √∂ver √•rets underh√•llsarbeten och st√∂rre projekt
            </Typography>
          </Box>
          
          <Box display="flex" gap={2} alignItems="center" flexWrap="wrap">
            {/* üßπ RENSA ALL DATA KNAPP */}
            <Button 
              size="small" 
              color="error" 
              variant="outlined"
              onClick={handleClearAllData}
              disabled={clearingData || (tasks.length === 0 && majorProjects.length === 0)}
              sx={{ 
                minWidth: 140,
                opacity: (tasks.length === 0 && majorProjects.length === 0) ? 0.5 : 1
              }}
            >
              {clearingData ? (
                <>
                  <CircularProgress size={16} sx={{ mr: 1 }} />
                  Rensar...
                </>
              ) : (
                'üßπ Rensa alla'
              )}
            </Button>

            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>√Ör</InputLabel>
              <Select value={selectedYear} label="√Ör" onChange={(e) => setSelectedYear(Number(e.target.value))}>
                {availableYears.map(year => (
                  <MenuItem key={year} value={year}>{year}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Visa som</InputLabel>
              <Select value={sortBy} label="Visa som" onChange={(e) => setSortBy(e.target.value as typeof sortBy)}>
                <MenuItem value="category">üìÇ Grupperat per kategori</MenuItem>
                <MenuItem value="due_date">üóìÔ∏è Sorterat efter f√∂rfallodatum</MenuItem>
                <MenuItem value="status">‚úÖ Sorterat efter status</MenuItem>
                <MenuItem value="name">üìù Sorterat efter namn</MenuItem>
                <MenuItem value="created_at">üìÖ Sorterat efter skapad</MenuItem>
              </Select>
            </FormControl>
            
{sortBy !== 'category' && (
              <FormControl size="small" sx={{ minWidth: 100 }}>
                <InputLabel>Ordning</InputLabel>
                <Select value={sortOrder} label="Ordning" onChange={(e) => setSortOrder(e.target.value as 'asc' | 'desc')}>
                  <MenuItem value="asc">Stigande</MenuItem>
                  <MenuItem value="desc">Fallande</MenuItem>
                </Select>
              </FormControl>
            )}
          </Box>
        </Box>

        {/* Progress Stats */}
        <Box sx={{ mt: 2 }}>
          <Typography variant="h6" color="primary">
            Framsteg {selectedYear}: {stats.completed} av {stats.total} uppgifter slutf√∂rda ({stats.percentage}%)
          </Typography>
          {stats.percentage === 100 && (
            <Alert severity="success" sx={{ mt: 1 }}>
              Fantastiskt! Alla underh√•llsuppgifter f√∂r {selectedYear} √§r slutf√∂rda!
            </Alert>
          )}
        </Box>
      </Paper>

      <Grid container spacing={3}>
        {/* √Örets Underh√•llschecklista */}
        <Grid item xs={12} lg={8}>
          <Card elevation={2}>
            <CardContent>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h5">
                  <CheckIcon color="primary" sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Underh√•llschecklista {selectedYear}
                </Typography>
                <Button 
                  size="small" 
                  startIcon={<AddIcon />}
                  onClick={() => setNewTaskDialog(true)}
                >
                  L√§gg till uppgift
                </Button>
              </Box>
              
{sortBy === 'category' ? (
                // Kategorivy - grupperat per kategori
                Object.entries(CATEGORY_LABELS).map(([category, label]) => {
                  const categoryTasks = getTasksByCategory(category as keyof typeof CATEGORY_LABELS);
                  if (categoryTasks.length === 0) return null;

                  return (
                    <Box key={category} sx={{ mb: 3 }}>
                      <Box display="flex" alignItems="center" gap={1} mb={2}>
                        <Chip 
                          label={label}
                          size="small"
                          sx={{ 
                            backgroundColor: CATEGORY_COLORS[category as keyof typeof CATEGORY_COLORS],
                            color: 'white'
                          }}
                        />
                        <Typography variant="body2" color="text.secondary">
                          {categoryTasks.filter(t => t.completed).length} av {categoryTasks.length} slutf√∂rda
                        </Typography>
                      </Box>
                      
                      <List dense>
                        {categoryTasks.map(task => renderTaskItem(task))}
                      </List>
                      <Divider sx={{ mt: 2 }} />
                    </Box>
                  );
                })
              ) : (
                // Sorterad listvy - alla uppgifter i en lista
                <List dense>
                  {getAllTasksSorted().map(task => renderTaskItem(task))}
                </List>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* St√∂rre Projekt & Historik */}
        <Grid item xs={12} lg={4}>
          {/* St√∂rre Projekt */}
          <Card elevation={2} sx={{ mb: 3 }}>
            <CardContent>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">
                  <BuildIcon color="primary" sx={{ mr: 1, verticalAlign: 'middle' }} />
                  St√∂rre Projekt
                </Typography>
                <Button 
                  size="small" 
                  startIcon={<AddIcon />}
                  onClick={() => setNewProjectDialog(true)}
                >
                  L√§gg till
                </Button>
              </Box>

              {majorProjects.length === 0 ? (
                <Typography variant="body2" color="text.secondary">
                  Inga st√∂rre projekt planerade √§n.
                </Typography>
              ) : (
                <List dense>
                  {majorProjects
                    .sort((a, b) => a.estimated_year - b.estimated_year)
                    .map(project => (
                                              <ListItem key={project.id} sx={{ pl: 0, pr: 10 }}>
                        <ListItemIcon>
                          {project.status === 'completed' ? (
                            <CheckIcon color="success" />
                          ) : project.status === 'in_progress' ? (
                            <BuildIcon color="warning" />
                          ) : project.status === 'tendering' ? (
                            <ScheduleIcon color="info" />
                          ) : project.priority === 'urgent' ? (
                            <WarningIcon color="error" />
                          ) : project.estimated_year <= currentYear ? (
                            <WarningIcon color="warning" />
                          ) : (
                            <ScheduleIcon color="action" />
                          )}
                        </ListItemIcon>
                        <ListItemText
                          primary={
                            <Box display="flex" alignItems="center" gap={1}>
                              <Typography variant="subtitle1">
                                {project.name}
                              </Typography>
                              {project.priority === 'urgent' && (
                                <Chip label="AKUT" size="small" color="error" />
                              )}
                              {project.priority === 'high' && (
                                <Chip label="H√ñG" size="small" color="warning" />
                              )}
                              {project.approval_status === 'agm_approved' && (
                                <Chip label="‚úÖ √Örsst√§mma" size="small" color="success" />
                              )}
                              {project.approval_status === 'board_approved' && (
                                <Chip label="‚úÖ Styrelse" size="small" color="primary" />
                              )}
                              
                              {/* STATUS CHIPS - visar var projektet befinner sig */}
                              {project.status === 'planned' && (
                                <Chip label="üìã Planerat" size="small" variant="outlined" color="default" />
                              )}
                              {project.status === 'approved' && (
                                <Chip label="‚úÖ Godk√§nt" size="small" color="success" />
                              )}
                              {project.status === 'tendering' && (
                                <Chip label="üìÑ Upphandling" size="small" color="info" />
                              )}
                              {project.status === 'in_progress' && (
                                <Chip label="üöß P√•g√•r" size="small" color="warning" />
                              )}
                              {project.status === 'completed' && (
                                <Chip label="‚úÖ Slutf√∂rt" size="small" color="success" />
                              )}
                              
                              {/* VISUAL CUE F√ñR DOKUMENT - visar att redigering finns */}
                              <Chip 
                                label="üìé Redigera f√∂r dokument" 
                                size="small" 
                                variant="outlined" 
                                color="info"
                                sx={{ 
                                  fontSize: '0.7rem',
                                  height: '20px'
                                }}
                                title="Klicka p√• redigera-ikonen f√∂r att ladda upp dokument"
                              />

                            </Box>
                          }
                          secondary={
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                {project.description}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                {project.status === 'completed' 
                                  ? `Slutf√∂rt ${project.completed_year}`
                                  : `Planerat ${project.estimated_year}`
                                }
                                {project.estimated_cost && (
                                  <> ‚Ä¢ Budget: {project.estimated_cost.toLocaleString('sv-SE')} kr</>
                                )}
                                {project.contractor && (
                                  <> ‚Ä¢ Entrepren√∂r: {project.contractor}</>
                                )}
                              </Typography>
                              <Typography variant="caption" display="block" sx={{ mt: 0.5 }}>
                                Status: {getProjectStatusLabel(project.status)}
                                {project.category && <> ‚Ä¢ Kategori: {getProjectCategoryLabel(project.category)}</>}
                              </Typography>
                            </Box>
                          }
                        />
                        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', ml: 1 }}>
                          <IconButton
                            size="small"
                            onClick={() => handleEditProject(project)}
                            sx={{ mb: 0.5 }}
                          >
                            <EditIcon fontSize="small" />
                          </IconButton>
                          <IconButton
                            size="small"
                            onClick={() => handleDeleteProject(project.id)}
                            color="error"
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Box>
                      </ListItem>
                    ))}
                </List>
              )}
            </CardContent>
          </Card>

          {/* F√∂reg√•ende √Ör */}
          {selectedYear < currentYear && (
            <Card elevation={2}>
              <CardContent>
                <Typography variant="h6" mb={2}>
                  <HistoryIcon color="primary" sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Historik {selectedYear}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Slutf√∂randegrad: {stats.percentage}%
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {stats.completed} av {stats.total} uppgifter slutf√∂rda
                </Typography>
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>

      {/* Dialog f√∂r nytt st√∂rre projekt */}
      <Dialog open={newProjectDialog} onClose={() => setNewProjectDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>L√§gg till st√∂rre projekt</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            {/* GRUNDL√ÑGGANDE INFORMATION */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üìã Grundl√§ggande information
            </Typography>
            <TextField
              fullWidth
              label="Projektnamn"
              value={newProject.name || ''}
              onChange={(e) => setNewProject({...newProject, name: e.target.value})}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Beskrivning"
              value={newProject.description || ''}
              onChange={(e) => setNewProject({...newProject, description: e.target.value})}
              multiline
              rows={2}
              sx={{ mb: 3 }}
            />

            {/* PLANERING & BUDGET */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üí∞ Planering & Budget
            </Typography>
            <TextField
              fullWidth
              label="Planerat √•r"
              type="number"
              value={newProject.estimated_year || ''}
              onChange={(e) => setNewProject({...newProject, estimated_year: Number(e.target.value)})}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Ber√§knad kostnad (kr)"
              type="number"
              value={newProject.estimated_cost || ''}
              onChange={(e) => setNewProject({...newProject, estimated_cost: Number(e.target.value)})}
              sx={{ mb: 3 }}
            />

            {/* KLASSIFICERING */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üè∑Ô∏è Klassificering
            </Typography>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Prioritet</InputLabel>
              <Select
                value={newProject.priority || 'medium'}
                onChange={(e) => setNewProject({...newProject, priority: e.target.value as MajorProject['priority']})}
                label="Prioritet"
              >
                <MenuItem value="low">L√•g</MenuItem>
                <MenuItem value="medium">Medium</MenuItem>
                <MenuItem value="high">H√∂g</MenuItem>
                <MenuItem value="urgent">üö® Akut</MenuItem>
              </Select>
            </FormControl>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Kategori</InputLabel>
              <Select
                value={newProject.category || ''}
                onChange={(e) => setNewProject({...newProject, category: e.target.value as MajorProject['category']})}
                label="Kategori"
              >
                <MenuItem value="structure">üèóÔ∏è Byggnad</MenuItem>
                <MenuItem value="heating">üî• V√§rme</MenuItem>
                <MenuItem value="plumbing">üö∞ VVS</MenuItem>
                <MenuItem value="electrical">‚ö° El</MenuItem>
                <MenuItem value="exterior">üè† Exteri√∂r</MenuItem>
                <MenuItem value="interior">üè° Interi√∂r</MenuItem>
              </Select>
            </FormControl>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Godk√§nnandestatus</InputLabel>
              <Select
                value={newProject.approval_status || 'pending'}
                onChange={(e) => setNewProject({...newProject, approval_status: e.target.value as MajorProject['approval_status']})}
                label="Godk√§nnandestatus"
              >
                <MenuItem value="pending">‚è≥ V√§ntar p√• godk√§nnande</MenuItem>
                <MenuItem value="board_approved">‚úÖ Styrelse godk√§nt</MenuItem>
                <MenuItem value="agm_approved">‚úÖ √Örsst√§mma godk√§nt</MenuItem>
              </Select>
            </FormControl>
            {/* LEVERANT√ñR & GODK√ÑNNANDE */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üë• Leverant√∂r & Godk√§nnande
            </Typography>
            <TextField
              fullWidth
              label="Entrepren√∂r/Leverant√∂r"
              value={newProject.contractor || ''}
              onChange={(e) => setNewProject({...newProject, contractor: e.target.value})}
              sx={{ mb: 2 }}
            />
            
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2, fontStyle: 'italic' }}>
              üí° Tips: Anv√§nd ‚úèÔ∏è redigera-ikonen efter att projektet skapats f√∂r att ladda upp dokument som kontrakt och tillst√•nd.
            </Typography>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setNewProjectDialog(false)}>Avbryt</Button>
          <Button onClick={handleAddMajorProject} variant="contained">
            L√§gg till
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog f√∂r ny underh√•llsuppgift */}
      <Dialog open={newTaskDialog} onClose={() => setNewTaskDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>L√§gg till underh√•llsuppgift</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            {/* GRUNDL√ÑGGANDE INFORMATION */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üìã Grundl√§ggande information
            </Typography>
            <TextField
              fullWidth
              label="Uppgiftsnamn"
              value={newTask.name || ''}
              onChange={(e) => setNewTask({...newTask, name: e.target.value})}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Beskrivning"
              value={newTask.description || ''}
              onChange={(e) => setNewTask({...newTask, description: e.target.value})}
              multiline
              rows={2}
              sx={{ mb: 3 }}
            />

            {/* TIDPLANERING */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üìÖ Tidplanering
            </Typography>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Kategori</InputLabel>
              <Select
                value={newTask.category || ''}
                onChange={(e) => setNewTask({...newTask, category: e.target.value as MaintenanceTask['category']})}
                label="Kategori"
              >
                <MenuItem value="winter">‚ùÑÔ∏è Vinter</MenuItem>
                <MenuItem value="spring">üå∏ V√•r</MenuItem>
                <MenuItem value="summer">‚òÄÔ∏è Sommar</MenuItem>
                <MenuItem value="autumn">üçÇ H√∂st</MenuItem>
                <MenuItem value="ongoing">üîÑ L√∂pande</MenuItem>
              </Select>
            </FormControl>
            <TextField
              fullWidth
              label="F√∂rfallodatum"
              type="date"
              value={newTask.due_date || ''}
              onChange={(e) => setNewTask({...newTask, due_date: e.target.value})}
              InputLabelProps={{
                shrink: true,
              }}
              sx={{ mb: 3 }}
            />

            {/* √ÖTERKOMMANDE FUNKTIONALITET */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üîÑ √Öterkommande underh√•ll
            </Typography>
            <Box sx={{ mb: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                Skapa uppgifter som automatiskt planeras f√∂r framtiden enligt ett schema.
              </Typography>
                
                <FormControl component="fieldset" sx={{ mb: 2 }}>
                  <Checkbox
                    checked={newTask.is_recurring || false}
                    onChange={(e) => setNewTask({
                      ...newTask, 
                      is_recurring: e.target.checked,
                      recurrence_pattern: e.target.checked ? 'annually' : undefined
                    })}
                  />
                  <Typography component="span" sx={{ ml: 1 }}>
                    Detta underh√•ll √•terkommer regelbundet
                  </Typography>
                </FormControl>

                {newTask.is_recurring && (
                  <FormControl fullWidth sx={{ mb: 2 }}>
                    <InputLabel>√Öterkommer</InputLabel>
                    <Select
                      value={newTask.recurrence_pattern || 'annually'}
                      onChange={(e) => setNewTask({...newTask, recurrence_pattern: e.target.value as MaintenanceTask['recurrence_pattern']})}
                      label="√Öterkommer"
                    >
                      <MenuItem value="monthly">üóìÔ∏è Varje m√•nad</MenuItem>
                      <MenuItem value="quarterly">üìÖ Varje kvartal (3 m√•nader)</MenuItem>
                      <MenuItem value="semi_annually">üìÜ Tv√• g√•nger per √•r</MenuItem>
                      <MenuItem value="annually">üóìÔ∏è En g√•ng per √•r</MenuItem>
                    </Select>
                  </FormControl>
                )}

                {newTask.is_recurring && (
                  <Typography variant="caption" color="text.secondary">
                    üí° <strong>Tips:</strong> √Öterkommande uppgifter skapar automatiskt nya instanser enligt schemat. 
                    Perfekt f√∂r BRF-underh√•ll som stupr√§nnor, ventilation, etc.
                  </Typography>
                )}
              </Box>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setNewTaskDialog(false)}>Avbryt</Button>
          <Button onClick={handleAddMaintenanceTask} variant="contained">
            L√§gg till
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog f√∂r redigering av underh√•llsuppgift */}
      <Dialog open={editTaskDialog} onClose={() => setEditTaskDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Redigera underh√•llsuppgift</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="Uppgiftsnamn"
              value={editTask.name || ''}
              onChange={(e) => setEditTask({...editTask, name: e.target.value})}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Beskrivning"
              value={editTask.description || ''}
              onChange={(e) => setEditTask({...editTask, description: e.target.value})}
              multiline
              rows={2}
              sx={{ mb: 2 }}
            />
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Kategori</InputLabel>
              <Select
                value={editTask.category || ''}
                onChange={(e) => setEditTask({...editTask, category: e.target.value as MaintenanceTask['category']})}
                label="Kategori"
              >
                <MenuItem value="winter">Vinter</MenuItem>
                <MenuItem value="spring">V√•r</MenuItem>
                <MenuItem value="summer">Sommar</MenuItem>
                <MenuItem value="autumn">H√∂st</MenuItem>
                <MenuItem value="ongoing">L√∂pande</MenuItem>
              </Select>
            </FormControl>
            <TextField
              fullWidth
              label="F√∂rfallodatum"
              type="date"
              value={editTask.due_date || ''}
              onChange={(e) => setEditTask({...editTask, due_date: e.target.value})}
              InputLabelProps={{
                shrink: true,
              }}
              sx={{ mb: 2 }}
            />

            {/* √ÖTERKOMMANDE FUNKTIONALITET F√ñR REDIGERING */}
            <Box sx={{ mb: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
              <Typography variant="subtitle2" gutterBottom>
                üîÑ √Öterkommande underh√•ll
              </Typography>
              
              <FormControl component="fieldset" sx={{ mb: 2 }}>
                <Checkbox
                  checked={editTask.is_recurring || false}
                  onChange={(e) => setEditTask({
                    ...editTask, 
                    is_recurring: e.target.checked,
                    recurrence_pattern: e.target.checked ? editTask.recurrence_pattern || 'annually' : undefined
                  })}
                />
                <Typography component="span" sx={{ ml: 1 }}>
                  Detta underh√•ll √•terkommer regelbundet
                </Typography>
              </FormControl>

              {editTask.is_recurring && (
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>√Öterkommer</InputLabel>
                  <Select
                    value={editTask.recurrence_pattern || 'annually'}
                    onChange={(e) => setEditTask({...editTask, recurrence_pattern: e.target.value as MaintenanceTask['recurrence_pattern']})}
                    label="√Öterkommer"
                  >
                    <MenuItem value="monthly">üóìÔ∏è Varje m√•nad</MenuItem>
                    <MenuItem value="quarterly">üìÖ Varje kvartal (3 m√•nader)</MenuItem>
                    <MenuItem value="semi_annually">üìÜ Tv√• g√•nger per √•r</MenuItem>
                    <MenuItem value="annually">üóìÔ∏è En g√•ng per √•r</MenuItem>
                  </Select>
                </FormControl>
              )}

              {editTask.is_recurring && editTask.next_due_date && (
                <Typography variant="caption" color="text.secondary">
                  üóìÔ∏è <strong>N√§sta planerade:</strong> {new Date(editTask.next_due_date).toLocaleDateString('sv-SE')}
                </Typography>
              )}
            </Box>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditTaskDialog(false)}>Avbryt</Button>
          <Button onClick={handleUpdateTask} variant="contained">
            Spara √§ndringar
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog f√∂r redigering av st√∂rre projekt */}
      <Dialog open={editProjectDialog} onClose={() => setEditProjectDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Redigera st√∂rre projekt</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 1 }}>
            <TextField
              fullWidth
              label="Projektnamn"
              value={editProject.name || ''}
              onChange={(e) => setEditProject({...editProject, name: e.target.value})}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Beskrivning"
              value={editProject.description || ''}
              onChange={(e) => setEditProject({...editProject, description: e.target.value})}
              multiline
              rows={2}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Planerat √•r"
              type="number"
              value={editProject.estimated_year || ''}
              onChange={(e) => setEditProject({...editProject, estimated_year: Number(e.target.value)})}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Ber√§knad kostnad (kr)"
              type="number"
              value={editProject.estimated_cost || ''}
              onChange={(e) => setEditProject({...editProject, estimated_cost: Number(e.target.value)})}
              sx={{ mb: 2 }}
            />
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Status</InputLabel>
              <Select
                value={editProject.status || 'planned'}
                onChange={(e) => setEditProject({...editProject, status: e.target.value as MajorProject['status']})}
                label="Status"
              >
                <MenuItem value="planned">üìã Planerat</MenuItem>
                <MenuItem value="approved">‚úÖ Godk√§nt</MenuItem>
                <MenuItem value="tendering">üìÑ Upphandling</MenuItem>
                <MenuItem value="in_progress">üöß P√•g√•r</MenuItem>
                <MenuItem value="completed">‚úÖ Slutf√∂rt</MenuItem>
              </Select>
            </FormControl>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Prioritet</InputLabel>
              <Select
                value={editProject.priority || 'medium'}
                onChange={(e) => setEditProject({...editProject, priority: e.target.value as MajorProject['priority']})}
                label="Prioritet"
              >
                <MenuItem value="low">L√•g</MenuItem>
                <MenuItem value="medium">Medium</MenuItem>
                <MenuItem value="high">H√∂g</MenuItem>
                <MenuItem value="urgent">üö® Akut</MenuItem>
              </Select>
            </FormControl>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Kategori</InputLabel>
              <Select
                value={editProject.category || ''}
                onChange={(e) => setEditProject({...editProject, category: e.target.value as MajorProject['category']})}
                label="Kategori"
              >
                <MenuItem value="structure">üèóÔ∏è Byggnad</MenuItem>
                <MenuItem value="heating">üî• V√§rme</MenuItem>
                <MenuItem value="plumbing">üö∞ VVS</MenuItem>
                <MenuItem value="electrical">‚ö° El</MenuItem>
                <MenuItem value="exterior">üè† Exteri√∂r</MenuItem>
                <MenuItem value="interior">üè° Interi√∂r</MenuItem>
              </Select>
            </FormControl>
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Godk√§nnandestatus</InputLabel>
              <Select
                value={editProject.approval_status || 'pending'}
                onChange={(e) => setEditProject({...editProject, approval_status: e.target.value as MajorProject['approval_status']})}
                label="Godk√§nnandestatus"
              >
                <MenuItem value="pending">‚è≥ V√§ntar p√• godk√§nnande</MenuItem>
                <MenuItem value="board_approved">‚úÖ Styrelse godk√§nt</MenuItem>
                <MenuItem value="agm_approved">‚úÖ √Örsst√§mma godk√§nt</MenuItem>
              </Select>
            </FormControl>
            <TextField
              fullWidth
              label="Entrepren√∂r/Leverant√∂r"
              value={editProject.contractor || ''}
              onChange={(e) => setEditProject({...editProject, contractor: e.target.value})}
              sx={{ mb: 2 }}
            />
            {editProject.status === 'completed' && (
              <>
                <TextField
                  fullWidth
                  label="Slutf√∂rd √•r"
                  type="number"
                  value={editProject.completed_year || ''}
                  onChange={(e) => setEditProject({...editProject, completed_year: Number(e.target.value)})}
                  sx={{ mb: 2 }}
                />
                <TextField
                  fullWidth
                  label="Verklig kostnad (kr)"
                  type="number"
                  value={editProject.actual_cost || ''}
                  onChange={(e) => setEditProject({...editProject, actual_cost: Number(e.target.value)})}
                  sx={{ mb: 2 }}
                />
              </>
            )}
            <TextField
              fullWidth
              label="Anteckningar"
              value={editProject.notes || ''}
              onChange={(e) => setEditProject({...editProject, notes: e.target.value})}
              multiline
              rows={3}
              sx={{ mb: 3 }}
            />

            {/* DOKUMENTHANTERING - √Öteranv√§nder befintligt system! */}
            <Typography variant="subtitle2" gutterBottom sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üìÑ Projektdokument
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              Ladda upp kontrakt, tillst√•nd, foton och andra dokument relaterade till projektet.
            </Typography>
            
            <Box sx={{ mb: 2 }}>
              <input
                type="file"
                accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.gif"
                onChange={handleDocumentUpload}
                style={{ display: 'none' }}
                id="document-upload"
                disabled={uploadingDoc}
              />
              <label htmlFor="document-upload">
                <Button
                  variant="outlined"
                  component="span"
                  startIcon={uploadingDoc ? <CircularProgress size={20} /> : <AttachFileIcon />}
                  disabled={uploadingDoc}
                >
                  {uploadingDoc ? 'Laddar upp...' : 'Ladda upp dokument'}
                </Button>
              </label>
            </Box>

            {projectDocuments.length > 0 && (
              <List dense sx={{ bgcolor: 'grey.50', borderRadius: 1, mb: 2 }}>
                {projectDocuments.map((doc) => (
                  <ListItem key={doc.id}>
                    <ListItemIcon>
                      {doc.mimetype?.includes('pdf') ? (
                        <PictureAsPdfIcon color="error" />
                      ) : doc.mimetype?.includes('image') ? (
                        <PhotoIcon color="primary" />
                      ) : (
                        <AttachFileIcon />
                      )}
                    </ListItemIcon>
                    <ListItemText
                      primary={doc.originalName}
                      secondary={`${(doc.size / 1024).toFixed(1)} KB ‚Ä¢ ${new Date(doc.uploadedAt).toLocaleDateString('sv-SE')}`}
                    />
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <IconButton
                        size="small"
                        href={doc.url}
                        target="_blank"
                        title="√ñppna dokument"
                      >
                        <OpenInNewIcon />
                      </IconButton>
                      <IconButton
                        size="small"
                        onClick={() => handleDocumentDelete(doc.id)}
                        color="error"
                        title="Ta bort dokument"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                  </ListItem>
                ))}
              </List>
            )}

            {projectDocuments.length === 0 && (
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2, fontStyle: 'italic' }}>
                Inga dokument uppladdade √§nnu. Ladda upp kontrakt, tillst√•nd, foton, etc.
              </Typography>
            )}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditProjectDialog(false)}>Avbryt</Button>
          <Button onClick={handleUpdateProject} variant="contained">
            Spara √§ndringar
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default SimpleMaintenancePlan;